{
    "openapi": "3.1.0",
    "info": {
        "title": "Morpheus API Gateway",
        "description": "API Gateway connecting Web2 clients to the Morpheus-Lumerin AI Marketplace",
        "version": "0.1.0"
    },
    "paths": {
        "/api/v1/auth/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register User",
                "description": "Register a new user.",
                "operationId": "register_user_api_v1_auth_register_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Login",
                "description": "Log in a user and return JWT tokens.\n\nSimply provide your email and password directly in the request body:\n\n```json\n{\n    \"email\": \"user@example.com\",\n    \"password\": \"yourpassword\"\n}\n```\n\nThe response will contain an access_token that should be used in the Authorization header\nfor protected endpoints, with the format: `Bearer {access_token}`",
                "operationId": "login_api_v1_auth_login_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "tags": ["Auth"],
                "summary": "Refresh Token",
                "description": "Get a new access token using a refresh token.",
                "operationId": "refresh_token_api_v1_auth_refresh_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefresh"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/api/v1/auth/keys": {
            "get": {
                "tags": ["Auth"],
                "summary": "Get Api Keys",
                "description": "Get all API keys for the current user.\n\nRequires JWT Bearer authentication with the token received from the login endpoint.",
                "operationId": "get_api_keys_api_v1_auth_keys_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIKeyDB"
                                    },
                                    "type": "array",
                                    "title": "Response Get Api Keys Api V1 Auth Keys Get"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            },
            "post": {
                "tags": ["Auth"],
                "summary": "Create Api Key",
                "description": "Create a new API key for the current user.\n\nRequires JWT Bearer authentication with the token received from the login endpoint.",
                "operationId": "create_api_key_api_v1_auth_keys_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIKeyCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIKeyResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/api/v1/auth/keys/{key_id}": {
            "delete": {
                "tags": ["Auth"],
                "summary": "Delete Api Key",
                "description": "Deactivate an API key.\n\nRequires JWT Bearer authentication with the token received from the login endpoint.",
                "operationId": "delete_api_key_api_v1_auth_keys__key_id__delete",
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [{
                    "name": "key_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "title": "Key Id"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIKeyDB"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/private-key": {
            "post": {
                "tags": ["Auth"],
                "summary": "Store Private Key",
                "description": "Store an encrypted blockchain private key for the authenticated user.\nReplaces any existing key.",
                "operationId": "store_private_key_api_v1_auth_private_key_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": true,
                                "title": "Request Body"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true,
                                    "title": "Response Store Private Key Api V1 Auth Private Key Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            },
            "get": {
                "tags": ["Auth"],
                "summary": "Get Private Key Status",
                "description": "Check if a user has a private key registered.\nDoes not return the actual key, only status information.",
                "operationId": "get_private_key_status_api_v1_auth_private_key_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrivateKeyStatus"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            },
            "delete": {
                "tags": ["Auth"],
                "summary": "Delete Private Key",
                "description": "Delete a user's private key.",
                "operationId": "delete_private_key_api_v1_auth_private_key_delete",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true,
                                    "title": "Response Delete Private Key Api V1 Auth Private Key Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/api/v1/models/": {
            "get": {
                "tags": ["Models"],
                "summary": "List Models",
                "description": "Get a list of available models.\n\nResponse is in OpenAI API format with selected fields from the blockchain data.\nOnly returns non-deleted models.",
                "operationId": "list_models_api_v1_models__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/api/v1/models/ratedbids": {
            "get": {
                "tags": ["Models"],
                "summary": "Get Rated Bids",
                "description": "Get rated bids for a specific model.\n\nConnects to the proxy-router's /blockchain/models/{id}/bids/rated endpoint.\nNote: Use the blockchain model ID (hex) not the name.",
                "operationId": "get_rated_bids_api_v1_models_ratedbids_get",
                "parameters": [{
                    "name": "model_id",
                    "in": "query",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "The blockchain ID (hex) of the model to get rated bids for, e.g. 0x1234...",
                        "title": "Model Id"
                    },
                    "description": "The blockchain ID (hex) of the model to get rated bids for, e.g. 0x1234..."
                }],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/api/v1/chat/completions": {
            "post": {
                "tags": ["Chat"],
                "summary": "Create Chat Completion",
                "description": "Create a chat completion with automatic session creation if enabled.",
                "operationId": "create_chat_completion_api_v1_chat_completions_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatCompletionRequest",
                                "description": "\n\nNote: You can optionally include 'session_id' if you want to use a specific session."
                            },
                            "example": {
                                "model": "gpt-3.5-turbo",
                                "messages": [{
                                    "role": "system",
                                    "content": "You are a helpful assistant."
                                }, {
                                    "role": "user",
                                    "content": "Hello, how are you?"
                                }],
                                "temperature": 0.7,
                                "stream": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "APIKeyAuth": []
                }]
            }
        },
        "/api/v1/session/approve": {
            "post": {
                "tags": ["Session"],
                "summary": "Approve Spending",
                "description": "Approve the contract to spend MOR tokens on your behalf.\n\nConnects to the proxy-router's /blockchain/approve endpoint.\nFor creating sessions, approve enough tokens by calculating: bid_price * session_duration.\nUses the DIAMOND_CONTRACT_ADDRESS environment variable as the spender contract address.",
                "operationId": "approve_spending_api_v1_session_approve_post",
                "security": [{
                    "APIKeyAuth": []
                }],
                "parameters": [{
                    "name": "amount",
                    "in": "query",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "description": "The amount to approve, consider bid price * duration for sessions",
                        "title": "Amount"
                    },
                    "description": "The amount to approve, consider bid price * duration for sessions"
                }],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/session/bidsession": {
            "post": {
                "tags": ["Session"],
                "summary": "Create Bid Session",
                "description": "Create a session with a provider using a bid ID and associate it with the API key.\n\nThis endpoint creates a session and automatically associates it with the API key used for authentication.\nEach API key can have at most one active session at a time.",
                "operationId": "create_bid_session_api_v1_session_bidsession_post",
                "security": [{
                    "APIKeyAuth": []
                }],
                "parameters": [{
                    "name": "bid_id",
                    "in": "query",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "The blockchain ID (hex) of the bid to create a session for",
                        "title": "Bid Id"
                    },
                    "description": "The blockchain ID (hex) of the bid to create a session for"
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SessionDataRequest",
                                "description": "Session data including duration and payment options"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/session/modelsession": {
            "post": {
                "tags": ["Session"],
                "summary": "Create Model Session",
                "description": "Create a session with a provider using a model ID and associate it with the API key.\n\nThis endpoint creates a session and automatically associates it with the API key used for authentication.\nEach API key can have at most one active session at a time.",
                "operationId": "create_model_session_api_v1_session_modelsession_post",
                "security": [{
                    "APIKeyAuth": []
                }],
                "parameters": [{
                    "name": "model_id",
                    "in": "query",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "The blockchain ID (hex) of the model to create a session for",
                        "title": "Model Id"
                    },
                    "description": "The blockchain ID (hex) of the model to create a session for"
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SessionDataRequest",
                                "description": "Session data including duration and payment options"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/session/closesession": {
            "post": {
                "tags": ["Session"],
                "summary": "Close Session",
                "description": "Close the session associated with the current API key.",
                "operationId": "close_session_api_v1_session_closesession_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [{
                    "APIKeyAuth": []
                }]
            }
        },
        "/api/v1/session/pingsession": {
            "post": {
                "tags": ["Session"],
                "summary": "Ping Session",
                "description": "Ping the session by attempting a simple chat completion.\nIf the chat completion fails, the session is considered dead and will be closed.",
                "operationId": "ping_session_api_v1_session_pingsession_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [{
                    "APIKeyAuth": []
                }]
            }
        },
        "/api/v1/automation/settings": {
            "get": {
                "tags": ["Automation"],
                "summary": "Get Automation Settings",
                "description": "Get automation settings for the authenticated user.",
                "operationId": "get_automation_settings_api_v1_automation_settings_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationSettings"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            },
            "put": {
                "tags": ["Automation"],
                "summary": "Update Automation Settings",
                "description": "Update automation settings for the authenticated user.",
                "operationId": "update_automation_settings_api_v1_automation_settings_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationSettingsBase"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationSettings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/": {
            "get": {
                "tags":["General"],
                "summary": "Root",
                "description": "Root endpoint returning basic API information.",
                "operationId": "root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        },
        "/health": {
            "get": {
                "tags":["General"],
                "summary": "Health Check",
                "description": "Health check endpoint to verify API and database status.",
                "operationId": "health_check_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [{
                    "BearerAuth": []
                }]
            }
        }
    },
    "components": {
        "schemas": {
            "APIKeyCreate": {
                "properties": {
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    }
                },
                "type": "object",
                "title": "APIKeyCreate",
                "description": "Schema for API key creation request."
            },
            "APIKeyDB": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "key_prefix": {
                        "type": "string",
                        "title": "Key Prefix"
                    },
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Is Active"
                    }
                },
                "type": "object",
                "required": ["id", "key_prefix", "created_at", "is_active"],
                "title": "APIKeyDB",
                "description": "Schema for API key in database response."
            },
            "APIKeyResponse": {
                "properties": {
                    "key": {
                        "type": "string",
                        "title": "Key"
                    },
                    "key_prefix": {
                        "type": "string",
                        "title": "Key Prefix"
                    },
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": ["key", "key_prefix"],
                "title": "APIKeyResponse",
                "description": "Schema for API key response."
            },
            "AutomationSettings": {
                "properties": {
                    "is_enabled": {
                        "anyOf": [{
                            "type": "boolean"
                        }, {
                            "type": "null"
                        }],
                        "title": "Is Enabled"
                    },
                    "session_duration": {
                        "anyOf": [{
                            "type": "integer"
                        }, {
                            "type": "null"
                        }],
                        "title": "Session Duration"
                    },
                    "user_id": {
                        "type": "integer",
                        "title": "User Id"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    }
                },
                "type": "object",
                "required": ["user_id", "created_at", "updated_at"],
                "title": "AutomationSettings"
            },
            "AutomationSettingsBase": {
                "properties": {
                    "is_enabled": {
                        "anyOf": [{
                            "type": "boolean"
                        }, {
                            "type": "null"
                        }],
                        "title": "Is Enabled"
                    },
                    "session_duration": {
                        "anyOf": [{
                            "type": "integer"
                        }, {
                            "type": "null"
                        }],
                        "title": "Session Duration"
                    }
                },
                "type": "object",
                "title": "AutomationSettingsBase"
            },
            "ChatCompletionRequest": {
                "properties": {
                    "model": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Model"
                    },
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/ChatMessage"
                        },
                        "type": "array",
                        "title": "Messages"
                    },
                    "temperature": {
                        "anyOf": [{
                            "type": "number"
                        }, {
                            "type": "null"
                        }],
                        "title": "Temperature",
                        "default": 1.0
                    },
                    "top_p": {
                        "anyOf": [{
                            "type": "number"
                        }, {
                            "type": "null"
                        }],
                        "title": "Top P",
                        "default": 1.0
                    },
                    "n": {
                        "anyOf": [{
                            "type": "integer"
                        }, {
                            "type": "null"
                        }],
                        "title": "N",
                        "default": 1
                    },
                    "stream": {
                        "anyOf": [{
                            "type": "boolean"
                        }, {
                            "type": "null"
                        }],
                        "title": "Stream",
                        "default": true
                    },
                    "stop": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }, {
                            "type": "null"
                        }],
                        "title": "Stop"
                    },
                    "max_tokens": {
                        "anyOf": [{
                            "type": "integer"
                        }, {
                            "type": "null"
                        }],
                        "title": "Max Tokens"
                    },
                    "presence_penalty": {
                        "anyOf": [{
                            "type": "number"
                        }, {
                            "type": "null"
                        }],
                        "title": "Presence Penalty",
                        "default": 0.0
                    },
                    "frequency_penalty": {
                        "anyOf": [{
                            "type": "number"
                        }, {
                            "type": "null"
                        }],
                        "title": "Frequency Penalty",
                        "default": 0.0
                    },
                    "session_id": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Session Id",
                        "description": "Optional session ID to use for this request. If not provided, the system will use the session associated with the API key."
                    }
                },
                "type": "object",
                "required": ["messages"],
                "title": "ChatCompletionRequest"
            },
            "ChatMessage": {
                "properties": {
                    "role": {
                        "type": "string",
                        "title": "Role"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": ["role", "content"],
                "title": "ChatMessage"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "PrivateKeyStatus": {
                "properties": {
                    "has_key": {
                        "type": "boolean",
                        "title": "Has Key"
                    },
                    "created_at": {
                        "anyOf": [{
                            "type": "string",
                            "format": "date-time"
                        }, {
                            "type": "null"
                        }],
                        "title": "Created At"
                    },
                    "updated_at": {
                        "anyOf": [{
                            "type": "string",
                            "format": "date-time"
                        }, {
                            "type": "null"
                        }],
                        "title": "Updated At"
                    }
                },
                "type": "object",
                "required": ["has_key"],
                "title": "PrivateKeyStatus",
                "description": "Schema for private key status response"
            },
            "SessionDataRequest": {
                "properties": {
                    "sessionDuration": {
                        "type": "integer",
                        "title": "Sessionduration",
                        "default": 3600
                    },
                    "directPayment": {
                        "type": "boolean",
                        "title": "Directpayment",
                        "default": false
                    },
                    "failover": {
                        "type": "boolean",
                        "title": "Failover",
                        "default": false
                    }
                },
                "type": "object",
                "title": "SessionDataRequest"
            },
            "Token": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "refresh_token": {
                        "type": "string",
                        "title": "Refresh Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "default": "bearer"
                    }
                },
                "type": "object",
                "required": ["access_token", "refresh_token"],
                "title": "Token",
                "description": "Schema for token response."
            },
            "TokenRefresh": {
                "properties": {
                    "refresh_token": {
                        "type": "string",
                        "title": "Refresh Token"
                    }
                },
                "type": "object",
                "required": ["refresh_token"],
                "title": "TokenRefresh",
                "description": "Schema for token refresh request."
            },
            "UserCreate": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    },
                    "is_active": {
                        "anyOf": [{
                            "type": "boolean"
                        }, {
                            "type": "null"
                        }],
                        "title": "Is Active",
                        "default": true
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": ["email", "password"],
                "title": "UserCreate"
            },
            "UserLogin": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email",
                        "description": "Email address for login"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "title": "Password",
                        "description": "User password"
                    }
                },
                "type": "object",
                "required": ["email", "password"],
                "title": "UserLogin",
                "description": "Schema for user login credentials",
                "example": {
                    "email": "user@example.com",
                    "password": "securepassword"
                }
            },
            "UserResponse": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "name": {
                        "anyOf": [{
                            "type": "string"
                        }, {
                            "type": "null"
                        }],
                        "title": "Name"
                    },
                    "is_active": {
                        "anyOf": [{
                            "type": "boolean"
                        }, {
                            "type": "null"
                        }],
                        "title": "Is Active",
                        "default": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    }
                },
                "type": "object",
                "required": ["email", "id"],
                "title": "UserResponse"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [{
                                "type": "string"
                            }, {
                                "type": "integer"
                            }]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": ["loc", "msg", "type"],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "description": "JWT Bearer token authentication",
                "scheme": "bearer"
            },
            "APIKeyHeader": {
                "type": "apiKey",
                "description": "Provide the API key as 'Bearer sk-xxxxxx'",
                "in": "header",
                "name": "Authorization"
            },
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Enter the JWT token you received from the login endpoint (without 'Bearer' prefix)"
            },
            "APIKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Provide the API key in either format: 'Bearer sk-xxxxxx.yyyyyyy' or just 'sk-xxxxxx.yyyyyyy'. The prefix is 9 characters long including 'sk-'."
            }
        }
    }
}